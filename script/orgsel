#!perl

# AUTHORITY
# DATE
# DIST
# VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

Perinci::CmdLine::Any->new(
    url => '/App/orgsel/orgsel',
    read_config => 0,
    read_env => 0,
)->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

=head2 Examples using F<todo.org>

Example document F<todo.org> (you can get this from the distribution shared
file):

# EXAMPLE: share/examples/todo.org

To get a picture of the structure, you can use L<dump-org-structure>, for
example C<dump-org-structure todo.org> will give:

# COMMAND: dump-org-structure share/examples/todo.org

Now for some selecting examples on F<todo.org>:

 # select the second-level headlines where we store the todo items (title-only)
 % orgsel todo.org 'Headline[level=2]' --node-action eval:'print $_->title->as_string,"\n"'
 [2021-06-26 Sat] SQLite::KeyValueStore::Simple: add delete function
 [2021-06-21 Mon] Perinci::CmdLine: unwanted removal of quotes?
 [2021-06-21 Mon] Config::IOD: set_value() eats comments
 [2021-06-18 Fri] Acme::CPANModules: category
 [2021-06-17 Thu] perl module: Software::Catalog::SW::rakudo::moar
 [2020-05-26 Tue] create a more generic version of csv-grep or csv-map
 [2020-05-29 Fri] csvutils: make csv-grep-fields, a more flexible form of csv-select-fields

 # when was a specific todo list last updated? (we look at log entries)
 % orgsel todo.org 'Headline[level=2][title.as_string =~ /set_value/] Timestamp:first'
 [2021-06-22]

 # how many bugs do we have?
 % orgsel todo.org 'Headline[level=2][todo_state="BUG"]' --count

 # how many bugs and other undone todo items?
 % orgsel todo.org 'Headline[level=2][is_todo is true][is_done is false]' --count

 # how many undone todo items for csvutils project?
 % orgsel todo.org 'Headline[level=1][title.as_string =~ /csvutils/] > Headline[level=2][is_todo is true][is_done is false]' --count

 # dump a particular todo item (helps visualize structure to select further)
 % orgsel todo.org 'Headline[level=2][title.as_string =~ /eats comments/]' | dump-org-structure

 # show the update log of the todo item (with the "- log ::"):
 % orgsel todo.org 'Headline[level=2][title.as_string =~ /eats comments/] > List > ListItem[desc_term.text = "log"]:parent'

 # show the update log of the todo item (without the "- log ::"):
 % orgsel todo.org 'Headline[level=2][title.as_string =~ /eats comments/] > List > ListItem[desc_term.text = "log"] + *'

 # select todo items which have been updated at least twice (by looking at
 # number of list items under "log")
 % orgsel todo.org 'Headline[level=2] > List > ListItem[desc_term.text = "log"] + *:has-min-children(2):parent:parent'

=head2 Examples using F<addressbook.org>

Example document F<addressbook.org> (you can get this from the distribution
shared file):

# EXAMPLE: share/examples/addressbook.org

Now for some selecting examples on F<addressbook.org>:

 # list contacts which have certain tag ("vet")
 % orgsel addressbook.org 'Headline[level=2][tags has "vet"]' --eval 'say $_->title->as_string'

 # count contacts matching /budi (and list them as well)
 % orgsel addressbook.org 'Headline[level=2][title.as_string =~ /budi/i]'  --eval 'say $_->title->as_string' --count

 # show notes about contact 'deni setiawan'
 % orgsel addressbook.org 'Headline[level=2][title.as_string = "deni setiawan"] > List > ListItem[desc_term.text = "notes"] + *'


=head1 DESCRIPTION

This utility allows you to select nodes from Org document on the command-line
using CSel selector syntax.

Org is a plain-text document format for keeping notes, maintaining to-do lists,
planning projects, authoring documents, and more. The specification and official
documentation is at L<https://orgmode.org>.

CSel is a pattern syntax to select various elements from a tree. It is modeled
after CSS selector. The specification is at L<Data::CSel>.

In B<orgsel>, Org document is first parsed into a document tree using
L<Org::Parser> then selected with the given CSel expression. Types are
C<Org::Element::*> classes (without the prefix).

See examples in the Synopsis to get an idea on how to use B<orgsel>.

Some tips:

=over

=item * To find out which attributes (methods) available for selecting using attribute selector, see documentation on C<Org::Element::*>

=back

=head1 SEE ALSO

If you want to select Org node elements from Perl, use L<Org::Parser> and
L<Data::CSel> directly.

More examples of CSel in general in L<CSel::Examples>.

L<App::OrgUtils> for other Org-related utilities.

L<htmlsel>, L<jsonsel>, L<yamlsel>, L<ddsel>, L<podsel>, L<ppisel> apply CSel to
other types of documents.
